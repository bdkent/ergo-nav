{"version":3,"sources":["utils.ts"," jsstore_con.ts","DataService.ts","components/Footer.tsx","components/columns.ts","components/Toolbar.tsx","components/ProgressBar.tsx","components/ForkMe.tsx","components/MainChart.tsx","App.tsx","hooks/useTimeSeriesData.ts","reportWebVitals.ts","index.tsx"],"names":["nowDateRange","endTime","DateTime","now","toUTC","start","toDay","minus","hours","end","d","utc","year","month","day","todayUTC","toSlug","date","padStart","toString","JsStore","require","workerPath","default","connection","Connection","Worker","load","a","slug","url","process","fetch","resp","json","initDb","name","tables","columns","id","primaryKey","dataType","time","notNull","reserveRatio","stableCoinPrice","stableCoinRatio","reserveCoinPrice","reserveCoinRatio","rawDate","today","isToday","equals","nextDate","plus","days","minutes","select","from","where","low","toMillis","high","items","length","insert","into","upsert","values","map","i","fromISO","loadForDateRange","dates","Observable","subscriber","queue","PQueue","concurrency","on","next","error","addAll","loadForDate","then","is","complete","initialize","Footer","memo","addr","document","querySelector","content","tipAddress","includes","undefined","className","href","target","rel","columnTitles","stable","reserve","columnFormatter","v","Toolbar","props","pickerProps","column","onColumnChange","onRangeChange","onChange","format","value","e","c","ProgressBar","progress","dayCount","onComplete","color","onLoaderFinished","ForkMe","data-ribbon","title","MainChart","timeSeriesData","chartRowHeight","useState","tracked","setTracked","selection","setSelection","setMouse","defaultTimeRange","useMemo","TimeRange","timeRange","setTimeRange","useEffect","handleMouseMove","useCallback","x","y","handleTrackerChanged","t","handleSelectionChange","s","eventMarkerProps","event","timeSeries","atTime","info","label","get","maxTime","maxDate","minTime","minDate","timeAxisAngledLabels","timeAxisHeight","onMouseMove","enablePanZoom","onTimeRangeChanged","onTrackerChanged","minDuration","height","min","max","width","type","axis","position","breakLine","series","onSelectionChange","interpolation","timeScale","args","console","log","infoWidth","markerRadius","markerStyle","fill","NullMarker","firstRecord","App","data","setData","dateRange","setDateRange","setProgress","handleResetProgress","addNewData","dateDiff","diff","nums","range","n","subscribe","handleRangeChange","startDate","endDate","dr","fromJSDate","allItems","sortBy","Object","keys","reduce","all","divisor","Math","ceil","chartData","acc","item","index","dateTime","toJSDate","parseInt","round","parseFloat","points","f","TimeSeries","useTimeSeriesData","ref","useRef","setColumn","size","current","offsetHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c10e1957.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\nimport { DateRange, Slug } from './types';\nimport padStart from 'lodash/padStart';\n\nexport function nowDateRange(): DateRange {\n  const endTime = DateTime.now().toUTC();\n  const startTime = endTime.minus({ hours: 12 });\n\n  return {\n    start: toDay(startTime),\n    end: toDay(endTime),\n  };\n}\n\nexport function toDay(d: DateTime): DateTime {\n  return DateTime.utc(d.year, d.month, d.day);\n}\n\nexport function todayUTC(): DateTime {\n  const now = DateTime.now().toUTC();\n  return toDay(now);\n}\n\nexport function toSlug(date: DateTime): Slug {\n  const d = date.toUTC();\n  return `${d.year}-${padStart(d.month.toString(), 2, '0')}-${padStart(\n    d.day.toString(),\n    2,\n    '0'\n  )}`;\n}\n","/* eslint-disable */\n\nconst JsStore = require('jsstore');\n\nconst getWorkerPath = () => {\n  // return dev build when env is development\n  if (process.env.NODE_ENV === 'development') {\n    return require('file-loader?name=scripts/[name].[hash].js!jsstore/dist/jsstore.worker.js');\n  } else {\n    // return prod build when env is production\n\n    return require('file-loader?name=scripts/[name].[hash].js!jsstore/dist/jsstore.worker.min.js');\n  }\n};\n\nconst workerPath = getWorkerPath().default;\nexport const connection = new JsStore.Connection(new Worker(workerPath));\n","import { DateTime } from 'luxon';\nimport PQueue from 'p-queue/dist/index';\nimport { Observable } from 'rxjs';\nimport { connection } from './ jsstore_con';\nimport { Item } from './types';\nimport { todayUTC, toSlug } from './utils';\n\nasync function load(date: DateTime): Promise<Item[]> {\n  const slug = toSlug(date);\n  const url = `${process.env.PUBLIC_URL}/data/daily/${slug}.json`;\n  // TODO: validate against schema https://github.com/pelotom/runtypes ?\n  const resp = await fetch(url);\n  return await resp.json();\n}\n\nasync function initialize() {\n  await connection.initDb({\n    name: 'sigmausd',\n    tables: [\n      {\n        name: 'Items',\n        columns: {\n          id: { primaryKey: true, dataType: 'number' },\n          time: { notNull: true, dataType: 'string' },\n          reserveRatio: { notNull: true, dataType: 'string' },\n          stableCoinPrice: { notNull: true, dataType: 'string' },\n          stableCoinRatio: { notNull: true, dataType: 'string' },\n          reserveCoinPrice: { notNull: true, dataType: 'string' },\n          reserveCoinRatio: { notNull: true, dataType: 'string' },\n        },\n      },\n    ],\n  });\n}\n\ninitialize();\n\nexport async function loadForDate(rawDate: DateTime): Promise<Item[]> {\n  const date = rawDate.toUTC();\n  const today = todayUTC();\n  const isToday = today.equals(date);\n\n  if (!isToday) {\n    // check db\n    const nextDate = date.plus({ days: 1 }).minus({ minutes: 5 });\n\n    const items: Item[] = await connection.select({\n      from: 'Items',\n      where: {\n        id: {\n          '-': {\n            low: date.toMillis(),\n            high: nextDate.toMillis(),\n          },\n        },\n      },\n    });\n\n    if (items.length > 0) {\n      return items;\n    }\n  }\n\n  const items = await load(date);\n\n  if (!isToday) {\n    await connection.insert({\n      into: 'Items',\n      upsert: true,\n      values: items.map((i) => ({\n        ...i,\n        id: DateTime.fromISO(i.time).toMillis(),\n      })),\n    });\n  }\n\n  return items;\n}\n\ntype DateRangeItems = [DateTime, Item[]];\n\nexport function loadForDateRange(\n  dates: DateTime[]\n): Observable<DateRangeItems> {\n  return new Observable<DateRangeItems>((subscriber) => {\n    const queue = new PQueue({ concurrency: 2 });\n    queue.on('completed', (items: DateRangeItems) => {\n      subscriber.next(items);\n    });\n    queue.on('error', (error) => {\n      subscriber.error(error);\n    });\n    queue\n      .addAll(\n        dates.map(\n          (date) => () => loadForDate(date).then((is) => [date, is] as const)\n        )\n      )\n      .then(() => subscriber.complete());\n  });\n}\n","import React, { memo } from 'react';\n\nexport const Footer = memo(() => {\n  const addr =\n    document.querySelector<HTMLMetaElement>('meta[name=tip]')?.content;\n  const tipAddress = addr?.includes('REACT_APP_TIP') ? undefined : addr;\n\n  return (\n    <footer className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <div className=\"container-fluid\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <a\n              href=\"http://sigmausd.io\"\n              className=\"nav-link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              sigmausd.io\n            </a>\n          </li>\n        </ul>\n        {tipAddress && (\n          <a\n            href={`https://explorer.ergoplatform.com/en/addresses/${tipAddress}`}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            &hearts; donations\n          </a>\n        )}\n      </div>\n    </footer>\n  );\n});\n","export const columns = ['reserveRatio', 'stable', 'reserve'] as const;\n\nexport type ColumnTypes = typeof columns[number];\n\nexport const columnTitles = {\n  reserveRatio: 'Reserve Ratio (%)',\n  stable: 'SigmaUSD Ratio ($)',\n  reserve: 'SigmaRSV Ratio',\n} as const;\n\nexport const columnFormatter = {\n  reserveRatio: (v: string) => `${v} %`,\n  stable: (v: string) => `$${v}`,\n  reserve: (v: string) => v,\n} as const;\n","import DateRangePicker from '@wojtekmaj/react-daterange-picker';\nimport React, { memo } from 'react';\n\nimport { PickerProps } from '../types';\nimport { ColumnTypes, columns, columnTitles } from './columns';\n\ntype ToolbarProps = {\n  pickerProps: PickerProps;\n  column: ColumnTypes;\n  onColumnChange: (column: ColumnTypes) => void;\n  onRangeChange: (dateRange?: [Date, Date]) => void;\n};\n\nexport const Toolbar = memo((props: ToolbarProps) => {\n  const { pickerProps, column, onColumnChange, onRangeChange } = props;\n\n  return (\n    <div className=\"d-flex flex-wrap\">\n      <div className=\"flex-fill\">\n        <DateRangePicker\n          {...pickerProps}\n          onChange={onRangeChange}\n          format=\"MMM d, y\"\n        />\n      </div>\n      <div className=\"flex-fill\">\n        <select\n          value={column}\n          className=\"form-select\"\n          onChange={(e) => {\n            onColumnChange(e.target.value as ColumnTypes);\n          }}\n        >\n          {columns.map((c) => (\n            <option key={c} value={c}>\n              {columnTitles[c]}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n});\n","import React, { memo } from 'react';\nimport LoadingBar from 'react-top-loading-bar';\n\ntype ProgressBarProps = {\n  progress: number;\n  dayCount: number;\n  onComplete: () => void;\n};\n\nexport const ProgressBar = memo((props: ProgressBarProps) => {\n  const { progress, dayCount, onComplete } = props;\n\n  return (\n    <LoadingBar\n      color=\"#f11946\"\n      progress={((dayCount - progress) / dayCount) * 100}\n      onLoaderFinished={onComplete}\n    />\n  );\n});\n","import React, { memo } from 'react';\n\nexport const ForkMe = memo(() => {\n  return (\n    <a\n      className=\"github-fork-ribbon\"\n      href=\"https://github.com/bdkent/sigmausd-history\"\n      data-ribbon=\"Fork me on GitHub\"\n      title=\"Fork me on GitHub\"\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      Fork me on GitHub\n    </a>\n  );\n});\n","import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart,\n  Resizable,\n  Baseline,\n  EventMarker,\n} from 'react-timeseries-charts';\nimport { TimeRange } from 'pondjs';\n\nimport { ColumnTypes, columnTitles, columnFormatter } from './columns';\nimport { CrossHairs } from './CrossHairs';\nimport { PickerProps, TimeSeriesData } from '../types';\n\nconst showCrossHair = false;\n\ntype MainChartProps = {\n  timeSeriesData: TimeSeriesData;\n  pickerProps: PickerProps;\n  column: ColumnTypes;\n  chartRowHeight: number;\n};\n\nexport const MainChart = memo((props: MainChartProps) => {\n  const { pickerProps, timeSeriesData, column, chartRowHeight } = props;\n\n  const [tracked, setTracked] = useState<Date | undefined>();\n\n  const [selection, setSelection] = useState<unknown>();\n\n  const [mouse, setMouse] = useState<readonly [number, number] | undefined>();\n\n  const defaultTimeRange = useMemo(\n    () => new TimeRange(timeSeriesData.start, timeSeriesData.end),\n    [timeSeriesData]\n  );\n\n  const [timeRange, setTimeRange] = useState<TimeRange>(defaultTimeRange);\n\n  useEffect(() => {\n    setTimeRange(defaultTimeRange);\n  }, [pickerProps, timeSeriesData, defaultTimeRange]);\n\n  const handleMouseMove = useCallback(\n    (x?: number, y?: number) =>\n      setMouse(x && y ? ([x, y] as const) : undefined),\n    []\n  );\n\n  const handleTrackerChanged = useCallback((t: Date) => {\n    setTracked(t);\n    if (!t) {\n      setMouse(undefined);\n    }\n  }, []);\n\n  const handleSelectionChange = useCallback(\n    (s: unknown) => setSelection(s),\n    []\n  );\n\n  const eventMarkerProps = useMemo(() => {\n    if (tracked) {\n      return {\n        event: timeSeriesData.timeSeries.atTime(tracked),\n        info: [\n          {\n            label: columnTitles[column],\n            value: columnFormatter[column](\n              `${timeSeriesData.timeSeries.atTime(tracked).get(column)}`\n            ),\n          },\n        ] as const,\n      };\n    } else {\n      return undefined;\n    }\n  }, [timeSeriesData, tracked, column]);\n\n  const columns = useMemo(() => ['time', column] as const, [column]);\n\n  return (\n    <Resizable>\n      <ChartContainer\n        timeRange={timeRange}\n        maxTime={pickerProps.maxDate}\n        minTime={pickerProps.minDate}\n        timeAxisAngledLabels={true}\n        timeAxisHeight={65}\n        onMouseMove={handleMouseMove}\n        enablePanZoom={true}\n        onTimeRangeChanged={setTimeRange}\n        onTrackerChanged={handleTrackerChanged}\n        minDuration={1000 * 60 * 60}\n      >\n        <ChartRow height={chartRowHeight}>\n          <YAxis\n            id=\"y\"\n            label={columnTitles[column]}\n            min={timeSeriesData.timeSeries.min(column, (x: unknown) => x)}\n            max={timeSeriesData.timeSeries.max(column)}\n            width=\"60\"\n            type=\"linear\"\n          />\n          <Charts>\n            <Baseline axis=\"y\" value={400} label=\"400%\" position=\"left\" />\n            <Baseline axis=\"y\" value={800} label=\"800%\" position=\"left\" />\n            <LineChart\n              axis=\"y\"\n              breakLine={false}\n              series={timeSeriesData.timeSeries}\n              columns={columns}\n              selection={selection}\n              onSelectionChange={handleSelectionChange}\n              interpolation=\"curveBasis\"\n              timeScale={function (...args: unknown[]) {\n                console.log('WOW', args);\n              }}\n            />\n            {tracked ? (\n              <EventMarker\n                {...eventMarkerProps}\n                type=\"flag\"\n                axis=\"y\"\n                infoWidth={180}\n                column={column}\n                markerRadius={3}\n                markerStyle={{ fill: 'black' }}\n              />\n            ) : (\n              <NullMarker />\n            )}\n            {showCrossHair && mouse ? (\n              <CrossHairs x={mouse[0]} y={mouse[1]} />\n            ) : (\n              <g />\n            )}\n          </Charts>\n        </ChartRow>\n      </ChartContainer>\n    </Resizable>\n  );\n});\n\nconst NullMarker = memo(() => {\n  return <g />;\n});\n","import './App.scss';\n\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport 'whatwg-fetch';\nimport { DateTime } from 'luxon';\nimport range from 'lodash/range';\n\nimport { DataMap, DateRange, Item, PickerProps, Slug } from './types';\nimport { toSlug, nowDateRange, toDay } from './utils';\nimport { loadForDateRange } from './DataService';\nimport { Footer } from './components/Footer';\nimport { ColumnTypes } from './components/columns';\nimport { Toolbar } from './components/Toolbar';\nimport { ProgressBar } from './components/ProgressBar';\nimport { ForkMe } from './components/ForkMe';\nimport { MainChart } from './components/MainChart';\nimport { useTimeSeriesData } from './hooks/useTimeSeriesData';\n\nconst firstRecord = DateTime.utc(2021, 5, 9, 13, 38);\n\nconst App = (): JSX.Element => {\n  const [data, setData] = useState<DataMap>({});\n\n  const [dateRange, setDateRange] = useState<DateRange>(nowDateRange());\n\n  const [progress, setProgress] = useState(0);\n\n  const handleResetProgress = useCallback(() => setProgress(0), []);\n\n  const addNewData = useCallback((slug: Slug, items: Item[]) => {\n    setData((data) => ({\n      ...data,\n      [slug]: items,\n    }));\n  }, []);\n\n  const dateDiff = useMemo(\n    () => toDay(dateRange.end).diff(toDay(dateRange.start), 'days').days + 1,\n    [dateRange]\n  );\n\n  useEffect(() => {\n    const nums = range(dateDiff);\n    setProgress(nums.length);\n\n    const dts = nums.map((n) => dateRange.start.plus({ days: n }));\n\n    loadForDateRange(dts).subscribe(([date, items]) => {\n      addNewData(toSlug(date), items);\n      setProgress((n) => n - 1);\n    });\n  }, [addNewData, dateRange, dateDiff]);\n\n  const handleRangeChange = useCallback((dateRange?: [Date, Date]) => {\n    if (!dateRange) {\n      setData({});\n      setDateRange(nowDateRange());\n    } else {\n      const [startDate, endDate] = dateRange;\n      setData({});\n      setDateRange((dr) => {\n        const start = DateTime.fromJSDate(startDate);\n        const end = DateTime.fromJSDate(endDate);\n        if (start.equals(dr.start) && end.equals(dr.end)) {\n          return dr;\n        }\n        return {\n          start,\n          end,\n        };\n      });\n    }\n  }, []);\n\n  const timeSeriesData = useTimeSeriesData(data);\n\n  const pickerProps: PickerProps = useMemo(\n    () => ({\n      value: [dateRange.start.toJSDate(), dateRange.end.toJSDate()],\n      maxDate: DateTime.now().toJSDate(),\n      minDate: firstRecord.toJSDate(),\n    }),\n    [dateRange]\n  );\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [column, setColumn] = useState<ColumnTypes>('reserveRatio');\n\n  return (\n    <div className=\"App container min-vh-100\">\n      <ProgressBar\n        progress={progress}\n        dayCount={dateDiff}\n        onComplete={handleResetProgress}\n      />\n      <ForkMe />\n      <div className=\"d-flex flex-column min-vh-100\">\n        <div>\n          <h1>SigmaUSD History</h1>\n          <Toolbar\n            pickerProps={pickerProps}\n            column={column}\n            onColumnChange={setColumn}\n            onRangeChange={handleRangeChange}\n          />\n          <hr />\n        </div>\n        <div className=\"flex-grow-1 \" ref={ref}>\n          {timeSeriesData && timeSeriesData.timeSeries.size() > 0 ? (\n            <MainChart\n              column={column}\n              timeSeriesData={timeSeriesData}\n              pickerProps={pickerProps}\n              chartRowHeight={(ref.current?.offsetHeight ?? 400) * 0.75}\n            />\n          ) : (\n            <p>No data available for given time range.</p>\n          )}\n        </div>\n        <div>\n          <hr />\n          <Footer />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { useMemo } from 'react';\nimport 'whatwg-fetch';\nimport { DateTime } from 'luxon';\nimport sortBy from 'lodash/sortBy';\nimport { TimeSeries } from 'pondjs';\n\nimport { columns } from '../components/columns';\nimport { DataMap, Item, TimeSeriesData } from '../types';\n\ntype Row = Readonly<\n  [\n    date: Date,\n    reserveRatio: number,\n    stable: number,\n    reserve: number,\n    ms: number\n  ]\n>;\n\nexport const useTimeSeriesData = (\n  data: DataMap\n): TimeSeriesData | undefined => {\n  return useMemo(() => {\n    const slugs = sortBy(Object.keys(data));\n\n    const allItems = slugs.reduce((all: Item[], slug) => {\n      return [...all, ...(data[slug] ?? [])];\n    }, []);\n\n    const divisor = Math.max(Math.ceil(allItems.length / 5000), 1);\n\n    const chartData = allItems.reduce((acc: Readonly<Row>[], item, index) => {\n      if (index % divisor === 0) {\n        const dateTime = DateTime.fromISO(item.time);\n        return [\n          ...acc,\n          [\n            dateTime.toJSDate(),\n            parseInt(item.reserveRatio, 10),\n            Math.round(parseFloat(item.stableCoinRatio) * 100) / 100,\n            parseInt(item.reserveCoinRatio, 10),\n            dateTime.toMillis(),\n          ] as const,\n        ];\n      } else {\n        return acc;\n      }\n    }, []);\n\n    if (!chartData?.length) {\n      return undefined;\n    }\n\n    const points = sortBy(chartData, (f) => f[4]);\n\n    return {\n      start: points[0]?.[0],\n      end: points[points.length - 1]?.[0],\n      timeSeries: new TimeSeries({\n        name: 'Data',\n        columns: ['time', ...columns],\n        points,\n      }),\n    };\n  }, [data]);\n};\n","/* eslint-disable */\n\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}